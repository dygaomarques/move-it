import { createContext, ReactNode, useEffect, useState } from 'react';

// Importando "database" de desafios
import challenges from '../../challenges.json';

/** 
 * Tipando as propriedades recebidas pelo componente
 * "ChallengeProvider"
*/
interface ChallengeProviderProps {
  children: ReactNode
}

/**
 * Tipando o challenge que representa o desafio retornado
 * do arquivo .json
 */
interface Challenge {
  type: 'body' | 'eye';
  description: string;
  amount: number;
}

/**
 * Tipando a Context API, essas s√£o os estados e 
 * m√©todos que ficam dispon√≠veis em toda a aplica√ß√£o
 */
interface ChallengeContextData {
  level: number;
  currentExperience: number;
  challengesCompleted: number;
  experienceToNextLevel: number;
  activeChallenge: Challenge;
  levelUp: () => void;
  startNewChallenge: () => void;
  resetChallenge: () => void;
  completeChallenge: () => void;
}

/**
 * Aqui estamos criando a context API, e definindo a tipagem da mesma logo ap√≥s
 */
export const ChallengeContext = createContext({} as ChallengeContextData);

/** 
 * Aqui estamos criando um componente para envolver toda a aplica√ß√£o
 * deixando assim a Context API dispon√≠vel em todo o projeto
 */
export function ChallengeProvider({ children }: ChallengeProviderProps) {

  
  /**
   * Aqui est√£o todos os estados que ser√£o necess√°rios na aplica√ß√£o
   */
  const [level, setLevel] = useState(1);
  const [currentExperience, setCurrentExperience] = useState(0);
  const [challengesCompleted, setChallengesCompleted] = useState(0);
  const [activeChallenge, setActiveChallenge] = useState(null);


  // Calculo da experi√™ncia necess√°ria para usu√°rio alcan√ßar o pr√≥ximo n√≠vel
  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);

  /**
   * Pedindo autoriza√ß√£o para exibir notifica√ß√µes
   */
  useEffect(() => {
    Notification.requestPermission();
  }, []);


  /**
   * Fun√ß√£o respons√°vel por subir o n√≠vel do usu√°rio
   */
  function levelUp() {

    // Subindo o n√≠vel
    setLevel(level + 1);
  }

  /**
   * Fun√ß√£o para subir o XP do usu√°rio
   */
  function completeChallenge() {
    if (!activeChallenge) {
      return;
    }

    const { amount } = activeChallenge;

    let finalExperience = currentExperience + amount;

    if (finalExperience >= experienceToNextLevel) {
      finalExperience = finalExperience - experienceToNextLevel;
      levelUp();
    }

    setCurrentExperience(finalExperience);
    setActiveChallenge(null);
    setChallengesCompleted(challengesCompleted + 1);
  }

  /**
   * Fun√ß√£o para dar inicio em um novo desafio
   */
  function startNewChallenge() {

    // Obtendo n√∫mero aleat√≥rio
    const radomChallengeIndex = Math.floor(Math.random() * challenges.length);

    // Buscando desafio aleat√≥rio
    const challenge = challenges[radomChallengeIndex];

    // Definindo o desafio ativo
    setActiveChallenge(challenge);

    // Tocando o audio da notifica√ß√£o
    new Audio('/notification.mp3').play();

    // Enviando a notifica√ß√£o de novo desafio
    if (Notification.permission === 'granted') {
      new Notification('Novo desafio üéâ',{
        body: `Valendo ${challenge.amount} xp`
      });
    }
  }

  /**
   * Fun√ß√£o para resetar o desafio
   */
  function resetChallenge() {
    setActiveChallenge(null);
  }

  /**
   * Aqui estamos retornando o componente, a propriedade ".provider" √© 
   * justamente a que d√° a aplica√ß√£o o poder de usar a Context API,
   * seguido da prop "value" onde ficam concentrados todos os estados e
   * m√©todos que ser√£o disponibilizados para toda a aplica√ß√£o
   */
  return (
    <ChallengeContext.Provider value={{
      level, 
      levelUp,
      currentExperience,
      challengesCompleted,
      activeChallenge,
      startNewChallenge,
      resetChallenge,
      experienceToNextLevel,
      completeChallenge
    }}>

      {/* Este c√≥digo permite que "ChallengeContext" receba um outro componente
      como filho */}
      {children}

    </ChallengeContext.Provider>
  )
}